/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.pottgames.lesscolors;

import com.beust.jcommander.JCommander;
import org.jetbrains.annotations.NotNull;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {

    public static void main(String[] args) {
        Arguments arguments = new Arguments();
        JCommander.newBuilder().addObject(arguments).build().parse(args);

        if (!validateArguments(arguments)) {
            return;
        }

        App app = new App();
        try {
            app.process(arguments);
        } catch (IOException e) {
            e.printStackTrace(System.err);
            System.err.println("An error occurred while processing the images.");
        }
    }


    public void process(@NotNull Arguments arguments) throws IOException {
        ColorPalette palette = this.createPaletteFromFile(arguments.paletteImagePath);
        BufferedImage image = ImageIO.read(new File(arguments.inputImagePath));
        this.convertColors(image, palette);
        ImageIO.write(image, arguments.outputImageType, new File(arguments.outputImagePath));
    }


    public void convertColors(@NotNull BufferedImage image, @NotNull ColorPalette palette) {
        for (int x = 0; x < image.getWidth(); x++) {
            for (int y = 0; y < image.getHeight(); y++) {
                int pixel = image.getRGB(x, y);
                Color originalColor = Color.fromArgbInt(pixel);
                Color newColor = palette.findClosestColor(originalColor);
                image.setRGB(x, y, newColor.toArgbInt());
            }
        }
    }


    public ColorPalette createPaletteFromFile(String path) throws IOException {
        BufferedImage image = ImageIO.read(new File(path));
        int width = image.getWidth();
        int height = image.getHeight();
        int pixels = image.getWidth() * image.getHeight();
        Color[] colors = new Color[pixels];
        int index = 0;

        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                int pixel = image.getRGB(x, y);
                colors[index++] = Color.fromArgbInt(pixel);
            }
        }

        return new ColorPalette(colors);
    }


    private static boolean validateArguments(Arguments arguments) {
        if (arguments.inputImagePath == null || arguments.inputImagePath.isEmpty()) {
            System.err.println("Missing input image path argument.");
            return false;
        }
        if (arguments.outputImagePath == null || arguments.outputImagePath.isEmpty()) {
            System.err.println("Missing output image path argument.");
            return false;
        }
        if (arguments.paletteImagePath == null || arguments.paletteImagePath.isEmpty()) {
            System.err.println("Missing palette image path argument.");
            return false;
        }
        if (Files.notExists(Paths.get(arguments.inputImagePath))) {
            System.err.println("Couldn't find file: " + arguments.inputImagePath);
            return false;
        }
        if (Files.notExists(Paths.get(arguments.paletteImagePath))) {
            System.err.println("Couldn't find file: " + arguments.paletteImagePath);
            return false;
        }

        return true;
    }

}
